name: Reusable swap functional tests

on:
  workflow_call:
    inputs:
      branch_for_exchange:
        required: false
        default: 'develop'
        type: string

      branch_for_stellar:
        required: false
        default: 'develop'
        type: string
      repo_for_stellar:
        required: false
        default: 'LedgerHQ/app-stellar'
        type: string

      branch_for_tezos:
        required: false
        default: 'develop'
        type: string
      repo_for_tezos:
        required: false
        default: 'LedgerHQ/app-tezos'
        type: string

      branch_for_xrp:
        required: false
        default: 'develop'
        type: string
      repo_for_xrp:
        required: false
        default: 'LedgerHQ/app-xrp'
        type: string

      branch_for_ethereum:
        required: false
        default: 'develop'
        type: string
      repo_for_ethereum:
        required: false
        default: 'LedgerHQ/app-ethereum'
        type: string

      branch_for_bitcoin_legacy:
        required: false
        default: 'develop'
        type: string
      repo_for_bitcoin_legacy:
        required: false
        default: 'LedgerHQ/app-bitcoin'
        type: string

      branch_for_bitcoin:
        required: false
        default: 'develop'
        type: string
      branch_for_bitcoin_nanos:
        required: false
        default: 'nanos'
        type: string
      repo_for_bitcoin:
        required: false
        default: 'LedgerHQ/app-bitcoin-new'
        type: string

      branch_for_solana:
        required: false
        default: 'develop'
        type: string
      branch_for_solana_nanos:
        required: false
        default: 'nanos'
        type: string
      repo_for_solana:
        required: false
        default: 'LedgerHQ/app-solana'
        type: string

      branch_for_polkadot:
        required: false
        default: 'develop'
        type: string
      repo_for_polkadot:
        required: false
        default: 'LedgerHQ/app-polkadot'
        type: string

      branch_for_tron:
        required: false
        default: 'develop'
        type: string
      repo_for_tron:
        required: false
        default: 'LedgerHQ/app-tron'
        type: string

      branch_for_near:
        required: false
        default: 'develop'
        type: string
      repo_for_near:
        required: false
        default: 'LedgerHQ/app-near'
        type: string

      branch_for_ton:
        required: false
        default: 'develop'
        type: string
      repo_for_ton:
        required: false
        default: 'LedgerHQ/app-ton-new'
        type: string

      branch_for_cardano:
        required: false
        default: 'develop'
        type: string
      repo_for_cardano:
        required: false
        default: 'LedgerHQ/app-cardano'
        type: string

      branch_for_cosmos:
        required: false
        default: 'main'
        type: string
      repo_for_cosmos:
        required: false
        default: 'cosmos/ledger-cosmos'
        type: string

      test_filter:
        required: false
        default: '""'
        type: string
      regenerate_snapshots:
        description: 'Clean snapshots, regenerate them, commit the changes in a branch, and open a PR'
        required: false
        default: false
        type: boolean

jobs:
  build_sideloaded_applications:
    name: Build libraries
    strategy:
      fail-fast: false
      matrix:
        coin:
        - name: stellar
          repo: ${{ inputs.repo_for_stellar }}
          branch: ${{ inputs.branch_for_stellar }}
        - name: tezos
          repo: ${{ inputs.repo_for_tezos }}
          branch: ${{ inputs.branch_for_tezos }}
        - name: xrp
          repo: ${{ inputs.repo_for_xrp }}
          branch: ${{ inputs.branch_for_xrp }}
        - name: ethereum
          repo: ${{ inputs.repo_for_ethereum }}
          branch: ${{ inputs.branch_for_ethereum }}
        - name: ethereum_classic
          repo: ${{ inputs.repo_for_ethereum }}
          branch: ${{ inputs.branch_for_ethereum }}
        - name: litecoin
          repo: ${{ inputs.repo_for_bitcoin_legacy }}
          branch: ${{ inputs.branch_for_bitcoin_legacy }}
        - name: bitcoin_legacy
          repo: ${{ inputs.repo_for_bitcoin_legacy }}
          branch: ${{ inputs.branch_for_bitcoin_legacy }}
        - name: bitcoin
          repo: ${{ inputs.repo_for_bitcoin }}
          branch: ${{ inputs.branch_for_bitcoin }}
        - name: bitcoin
          repo: ${{ inputs.repo_for_bitcoin }}
          branch: ${{ inputs.branch_for_bitcoin_nanos }}
        - name: solana
          repo: ${{ inputs.repo_for_solana }}
          branch: ${{ inputs.branch_for_solana }}
        - name: solana
          repo: ${{ inputs.repo_for_solana }}
          branch: ${{ inputs.branch_for_solana_nanos }}
        - name: DOT
          repo: ${{ inputs.repo_for_polkadot }}
          branch: ${{ inputs.branch_for_polkadot }}
        - name: tron
          repo: ${{ inputs.repo_for_tron }}
          branch: ${{ inputs.branch_for_tron }}
        - name: ton
          repo: ${{ inputs.repo_for_ton }}
          branch: ${{ inputs.branch_for_ton }}
        - name: cardano
          repo: ${{ inputs.repo_for_cardano }}
          branch: ${{ inputs.branch_for_cardano }}
        - name: near
          repo: ${{ inputs.repo_for_near }}
          branch: ${{ inputs.branch_for_near }}
        - name: ATOM
          repo: ${{ inputs.repo_for_cosmos }}
          branch: ${{ inputs.branch_for_cosmos }}

    uses: LedgerHQ/ledger-app-workflows/.github/workflows/reusable_build.yml@v1
    with:
      app_repository: ${{ matrix.coin.repo }}
      app_branch_name: ${{ matrix.coin.branch }}
      # Set the coin variant to build with COIN or CHAIN depending on the app + flags for ETH compilation
      # As a rule of thumb we don't care about giving unexisting flags to other apps, it has no effect
      flags: "COIN=${{ matrix.coin.name }} CHAIN=${{ matrix.coin.name }} CAL_TEST_KEY=1 DOMAIN_NAME_TEST_KEY=1 SET_PLUGIN_TEST_KEY=1 NFT_TEST_KEY=1 TRUSTED_NAME_TEST_KEY=1"
      upload_app_binaries_artifact: libraries_binaries-${{ matrix.coin.name }}-${{ strategy.job-index }}
      upload_as_lib_artifact: ${{ matrix.coin.name }}
      builder: ledger-app-builder

  merge_libraries_build:
    name: Merge built libraries
    needs: build_sideloaded_applications
    runs-on: ubuntu-latest
    steps:
      - uses: actions/upload-artifact/merge@v4
        with:
          name: libraries_binaries
          pattern: libraries_binaries-*
          delete-merged: true

  build_exchange_application:
    name: Build Exchange
    uses: LedgerHQ/ledger-app-workflows/.github/workflows/reusable_build.yml@v1
    with:
      app_repository: LedgerHQ/app-exchange
      app_branch_name: ${{ inputs.branch_for_exchange }}
      flags: "TESTING=1 TEST_PUBLIC_KEY=1"
      upload_app_binaries_artifact: exchange_binaries

  ragger_tests:
    name: Run ragger tests
    needs:
      - build_exchange_application
      - merge_libraries_build
    uses: LedgerHQ/ledger-app-workflows/.github/workflows/reusable_ragger_tests.yml@v1
    with:
      app_repository: LedgerHQ/app-exchange
      app_branch_name: ${{ inputs.branch_for_exchange }}
      download_app_binaries_artifact: exchange_binaries
      lib_binaries_artifact: libraries_binaries
      test_filter: ${{ inputs.test_filter }}
      regenerate_snapshots: ${{ inputs.regenerate_snapshots }}
