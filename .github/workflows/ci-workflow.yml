name: Compilation & tests

on:
  workflow_dispatch:
  push:
    branches:
    - master
    - develop
  pull_request:

jobs:
  job_swap_functional_tests:
    uses: ./.github/workflows/reusable_swap_functional_tests.yml
    with:
      branch_for_exchange: ${{ github.ref }}

  job_scan_build:
    name: Clang Static Analyzer
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Build with Clang Static Analyzer
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          make -C ledger-nanopb/generator/proto
          make clean
          scan-build --use-cc=clang -analyze-headers -enable-checker security -enable-checker unix -enable-checker valist -o scan-build --status-bugs make default
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: scan-build
          path: scan-build

########################################

jobs:
  build_sideloaded_applications:
    strategy:
      matrix:
        sdk:
        - path: $NANOS_SDK
          name: nanos
        - path: $NANOX_SDK
          name: nanox
        - path: $NANOSP_SDK
          name: nanosp
        coin:
        - name: stellar
          repo: app-stellar
          branch: develop
          extra_build_step:
          bin_path: bin
        - name: tezos
          repo: app-tezos
          branch: develop
          extra_build_step:
          bin_path: bin
        - name: xrp
          repo: app-xrp
          branch: develop
          extra_build_step:
          bin_path: bin
        - name: ethereum
          repo: app-ethereum
          branch: develop
          extra_build_step:
          bin_path: bin
        - name: ethereum_classic
          repo: app-ethereum
          branch: develop
          extra_build_step:
          bin_path: bin
        - name: litecoin
          repo: app-bitcoin
          branch: master
          extra_build_step:
          bin_path: bin
        - name: bitcoin_legacy
          repo: app-bitcoin
          branch: master
          extra_build_step:
          bin_path: bin
        - name: bitcoin
          repo: app-bitcoin-new
          branch: develop
          extra_build_step:
          bin_path: bin
        - name: polkadot
          repo: app-polkadot
          branch: add-swap-feature
          bin_path: app/bin
          extra_build_step: git config --global --add safe.directory '*' && git submodule update --init --recursive && APP_COIN=DOT


    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest

    steps:
      - name: Clone ${{ matrix.coin.repo }} for coin ${{ matrix.coin.name }}
        uses: actions/checkout@v3
        with:
          repository: LedgerHQ/${{ matrix.coin.repo }}
          ref: ${{  matrix.coin.branch }}

      - name: Build in ${{ matrix.coin.repo }} coin ${{ matrix.coin.name }} for SDK ${{ matrix.sdk.name }}
        run: |
          APP_COIN=${{ matrix.coin.name }}
          ${{ matrix.coin.extra_build_step }}
          make clean ; make COIN=$APP_COIN BOLOS_SDK=${{ matrix.sdk.path }} DEBUG=1
          BIN_PATH=${{ matrix.coin.bin_path }}
          cp $BIN_PATH/app.elf $BIN_PATH/${{ matrix.coin.name }}_${{ matrix.sdk.name }}.elf

      - name: Upload ${{ matrix.coin.name }} binaries
        uses: actions/upload-artifact@v3
        with:
          name: coins_binaries
          path: ./bin/${{ matrix.coin.name }}_${{ matrix.sdk.name }}.elf
          if-no-files-found: error

  build_exchange_application:
    name: Build Exchange
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sdk: [{path: $NANOS_SDK, name: nanos}, {path: $NANOX_SDK, name: nanox}, {path: $NANOSP_SDK, name: nanosp}]

    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest

    steps:
      - name: Clone
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Build Exchange
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          make -C ledger-nanopb/generator/proto
          make clean ; make BOLOS_SDK=${{ matrix.sdk.path }} TESTING=1 TEST_PUBLIC_KEY=1 DEBUG=1
          cp bin/app.elf bin/exchange_${{ matrix.sdk.name }}.elf

      - name: Upload Exchange binaries
        uses: actions/upload-artifact@v3
        with:
          name: exchange_binaries
          path: ./bin/exchange_${{ matrix.sdk.name }}.elf
          if-no-files-found: error

  jobs_e2e_tests:
    strategy:
      matrix:
        device: ["Nano S", "Nano X", "Nano SP"]
    needs:
      - build_exchange_application
      - build_sideloaded_applications
    runs-on: ubuntu-latest

    steps:
      - name: Clone
        uses: actions/checkout@v3

      - name: Install APT dependencies
        run: sudo apt-get update -y && sudo apt-get install -y libusb-1.0.0 libudev-dev

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install Yarn
        run: npm install -g yarn

      - name: Install JS dependencies
        run: cd test && yarn install

      - name: Download all binaries
        uses: actions/download-artifact@v3

      - name: Gather artifacts
        run: |
          mkdir test/elfs
          mv *_binaries/*.elf test/elfs

      - name: Run zemu tests for device ${{ matrix.device }}
        run: cd test && yarn test -t "\[${{ matrix.device }}\]"

  python_tests:
    name: Ragger tests
    needs:
      - build_exchange_application
      - build_sideloaded_applications
    runs-on: ubuntu-latest
    strategy:
      matrix:
        device: ["nanos", "nanox", "nanosp"]
    steps:
      - name: Clone
        uses: actions/checkout@v3

      - name: Download all binaries
        uses: actions/download-artifact@v3

      - name: Gather artifacts
        run: |
          mkdir test/elfs
          mv *_binaries/*.elf test/elfs

      - name: Install APT dependencies
        run: sudo apt-get update && sudo apt-get install -y qemu-user-static

      - name: Install Ragger
        run: |
          pip install --extra-index-url https://test.pypi.org/simple/ -U -r test/python/requirements.txt

      - name: Run test for device ${{ matrix.device }}
        run: pytest test/python/ -v --tb=short --device ${{ matrix.device }}

