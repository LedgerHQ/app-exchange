from time import sleep

from .apps.exchange import ExchangeClient, Rate, SubCommand
from .apps.ethereum import EthereumClient


PARTNER_PRIV_KEY = bytes([
    0x10, 0x67, 0xE5, 0xF6, 0xB3, 0x48, 0xEA, 0xC2, 0x68, 0xB6, 0x4F, 0xC9,
    0xEB, 0x5A, 0x31, 0xA7, 0xD7, 0x9E, 0x33, 0xDF, 0xD6, 0xFE, 0xF7, 0x6E,
    0xAB, 0x9F, 0x49, 0x9B, 0x47, 0xEE, 0xD6, 0x9D
])

PARTNER_PUB_KEY = bytes([
    0x09, 0x46, 0x55, 0x4E, 0x44, 0x5F, 0x54, 0x45, 0x53, 0x54, 0x04, 0x00,
    0xBE, 0xEF, 0x98, 0xB4, 0xB2, 0x99, 0x4F, 0x68, 0x8F, 0xD9, 0x8B, 0x56,
    0x5E, 0x17, 0x1E, 0xC9, 0x25, 0x9C, 0x89, 0x06, 0x14, 0xD2, 0xDB, 0xA6,
    0x10, 0x52, 0x02, 0x01, 0x8E, 0x3A, 0x76, 0x4A, 0xA6, 0x68, 0x3E, 0xA1,
    0x16, 0xC9, 0xE0, 0xE3, 0xC8, 0x01, 0xCA, 0x5A, 0xB9, 0x72, 0xA2, 0xF8,
    0xF7, 0x9F, 0x90, 0x6E, 0x19, 0xF7, 0x3E, 0xDB, 0x91, 0x45, 0x00, 0xEA,
    0xD0, 0x2D, 0x70
])

PARTNER_KEY_SIGNATURE = bytes([
    0x30, 0x44, 0x02, 0x20, 0x3C, 0x1C, 0xE9, 0xEA, 0xF2, 0x1A, 0x18, 0x80,
    0x3E, 0xA9, 0x87, 0x6F, 0xAB, 0x8F, 0x8A, 0x24, 0xB0, 0xD6, 0xE5, 0xF2,
    0x6E, 0xF7, 0x54, 0xF2, 0xD1, 0xA0, 0xAC, 0x34, 0x24, 0xFC, 0xB8, 0xE1,
    0x02, 0x20, 0x4F, 0x6C, 0x92, 0xCF, 0xEC, 0x8F, 0x23, 0x2C, 0x1B, 0x14,
    0x89, 0x88, 0x2F, 0x98, 0x07, 0x0F, 0xE3, 0xE2, 0x00, 0x84, 0xD0, 0x23,
    0xD6, 0x53, 0xE3, 0xEE, 0xF6, 0x96, 0xBC, 0xA0, 0x27, 0x78
])


def test_fund_flow(client):
    ex = ExchangeClient(client, Rate.FIXED, SubCommand.FUND,
                        partner_keys=(PARTNER_PRIV_KEY, PARTNER_PUB_KEY, PARTNER_KEY_SIGNATURE))
    eth = EthereumClient(client)
    ex.init_transaction()
    ex.set_partner_key(PARTNER_PUB_KEY)
    ex.check_partner_key(PARTNER_KEY_SIGNATURE)

    tx_infos = {
        'user_id': "John Wick",
        'account_name': "Remember Daisy",
        'in_currency': "ETH",
        'in_amount': b"\032\200\250]$T\000",
        'in_address': "0x252fb4acbe0de4f0bd2409a5ed59a71e4ef1d2bc"
    }

    ex.process_transaction(tx_infos, b'\x10\x0f\x9c\x9f\xf0"\x00')
    ex.check_transaction()
    ex.check_address(right_clicks=5)
    ex.start_signing_transaction()

    sleep(0.1)

    assert eth.get_public_key().status == 0x9000
    assert eth.sign().status == 0x9000
