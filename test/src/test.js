// @flow
import "@babel/polyfill";
import HttpTransport from "@ledgerhq/hw-transport-http/lib/HttpTransport";
import Swap from "@ledgerhq/hw-app-swap";
import Btc from "@ledgerhq/hw-app-btc";
import type Transport from "@ledgerhq/hw-transport";
import secp256k1 from "secp256k1";
import sha256 from "js-sha256";
import "./protocol_pb.js";

// This values where generated by ./tools/index.js scripts
const swapTestPrivateKey: Buffer = Buffer.from(
[0x1D, 0x20, 0x2B, 0xC5, 0xEE, 0x1C, 0xED, 0x2F, 0xE7, 0xAF,
 0x32, 0x38, 0x20, 0x16, 0xA1, 0x7, 0x35, 0x5D, 0xC0, 0xD2,
 0x4E, 0x22, 0x73, 0x41, 0xF4, 0x31, 0xA, 0x3C, 0xC, 0x50,
 0xD9, 0x3D]);

const swapSignedNameAndPubKey: Buffer = Buffer.from(
[0x9, 0x53, 0x57, 0x41, 0x50, 0x5F, 0x54, 0x45, 0x53, 0x54,
 0x3, 0x66, 0xA, 0x15, 0x3, 0x9, 0xFB, 0x52, 0xF3, 0xD4,
 0x2C, 0x27, 0xAD, 0x4, 0xDC, 0x31, 0x99, 0xAA, 0x23, 0x37,
 0xBD, 0x2A, 0x8A, 0x0, 0x2C, 0x53, 0x37, 0xD1, 0x78, 0x8A,
 0xE3, 0x47, 0xD3, 0x15, 0x1B, 0xDC, 0x77, 0x2C, 0xED, 0x25,
 0x86, 0x3C, 0x59, 0x46, 0xBD, 0xA7, 0x81, 0x24, 0xBC, 0x15,
 0xA4, 0xD, 0x60, 0x2F, 0xBE, 0x45, 0x8F, 0x7E, 0xDB, 0x84,
 0x4, 0x6F, 0x95, 0xC2, 0x81, 0x69, 0xAA, 0xC0, 0x35, 0x2B,
 0x95, 0x5F, 0x76, 0x79, 0x66, 0xB3, 0x16, 0xD4, 0x3F, 0xCF,
 0xD8, 0x38, 0x20, 0x39, 0x34, 0xB9, 0xDC, 0xE8, 0xEE, 0x3E,
 0x8C, 0xE1, 0x64, 0xBE, 0x57, 0xC1, 0xDF]);

 function numberToBigEndianBuffer(x: Number): Buffer {
   var hex =x.toString(16);
   return Buffer.from(hex.padStart(hex.length + hex.length % 2, '0'), 'hex');
 }

test('TransactionId should be 10 uppercase letters', async () => {
  const transport: Transport<string> = await HttpTransport.open("http://127.0.0.1:9998");
  const swap: Swap = new Swap(transport);
  const transactionId: string  = await swap.startNewTransaction();
  expect(transactionId.length).toBe(10);
  expect(transactionId).toBe(transactionId.toUpperCase());
})

/*
test('Transaction should be signed', async () => {
  const transport: Transport<string> = await HttpTransport.open("http://127.0.0.1:9998");
  const swap: Swap = new Swap(transport);
  const transactionId: string  = await swap.startNewTransaction();
  await swap.setPartnerKey(swapSignedNameAndPubKey);
  // Create a proto transaction 
  var tr = new proto.ledger_swap.NewTransactionResponse();
  tr.setPayinAddress("2324234324324234");
  tr.setRefundAddress("sfdsfdsfsdfdsfsdf");
  tr.setPayoutAddress("asdasdassasadsada");
  tr.setCurrencyFrom("BTC");
  tr.setCurrencyTo("ETH");
  // 100000000 Satoshi to 48430000000000000000 Wei (1 BTC to 48.43 ETH)
  tr.setAmountToProvider(numberToBigEndianBuffer(100000000));
  tr.setAmountToWallet(numberToBigEndianBuffer(48430000000000000000));
  tr.setDeviceTransactionId(transactionId);

  const payload: Buffer = Buffer.from(tr.serializeBinary());
  const digest: Buffer = Buffer.from(sha256.sha256.array(payload));
  const signature: Buffer = secp256k1.sign(digest, swapTestPrivateKey).signature;
  expect(signature.length).toBe(64);
  await swap.processTransactionResponse(payload, signature);
})
 */