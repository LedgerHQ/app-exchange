import { bip32asBuffer } from "./bip32";
import { listen } from "@ledgerhq/logs";

listen((log) => {
    console.log(log);
});

// ############################################################
// # These values were generated by ./tools/index.js scripts #
// ############################################################

export const swapTestPrivateKey: Buffer = Buffer.from(
    [0x1D, 0x20, 0x2B, 0xC5, 0xEE, 0x1C, 0xED, 0x2F, 0xE7, 0xAF,
        0x32, 0x38, 0x20, 0x16, 0xA1, 0x7, 0x35, 0x5D, 0xC0, 0xD2,
        0x4E, 0x22, 0x73, 0x41, 0xF4, 0x31, 0xA, 0x3C, 0xC, 0x50,
        0xD9, 0x3D]);

export const partnerSerializedNameAndPubKey: Buffer = Buffer.from(
    [0x9, 0x53, 0x57, 0x41, 0x50, 0x5F, 0x54, 0x45, 0x53, 0x54, 0x4, 0x66, 0xA, 0x15, 0x3, 0x9, 0xFB, 0x52, 0xF3, 0xD4, 0x2C, 0x27, 0xAD, 0x4, 0xDC, 0x31, 0x99, 0xAA, 0x23, 0x37, 0xBD, 0x2A, 0x8A, 0x0, 0x2C, 0x53, 0x37, 0xD1, 0x78, 0x8A, 0xE3, 0x47, 0xD3, 0x33, 0x6E, 0x0, 0xEA, 0x33, 0xF4, 0x77, 0x8C, 0xD9, 0x1F, 0xF7, 0xD2, 0x8A, 0x89, 0x42, 0xEF, 0xD7, 0x73, 0x5D, 0xC3, 0xAD, 0x1B, 0x74, 0x53, 0xF1, 0xB9, 0xBD, 0x1F, 0xB4, 0xFE, 0x65, 0xFD]);

export const DERSignatureOfPartnerNameAndPublicKey: Buffer = Buffer.from(
    [0x30, 0x44, 0x2, 0x20, 0x50, 0xC, 0xA, 0xCF, 0x95, 0x82, 0x0, 0x88, 0x4B, 0x23, 0xC6, 0xAE, 0x7F, 0xEE, 0xCB, 0x1, 0x36, 0x6D, 0x62, 0x48, 0xF4, 0xEA, 0xCB, 0x45, 0x2C, 0x60, 0x81, 0xE9, 0x8, 0x36, 0xDC, 0xCC, 0x2, 0x20, 0x7D, 0x78, 0xCB, 0xC9, 0x10, 0x3D, 0x3, 0xAB, 0x2B, 0x64, 0xE1, 0x61, 0x52, 0x4F, 0xB4, 0xF3, 0xCD, 0x9A, 0x88, 0x3F, 0x7F, 0xED, 0xBF, 0x92, 0xCB, 0x48, 0xBF, 0x7A, 0x10, 0x2D, 0x87, 0x30]);

export const fundTestPrivateKey: Buffer = Buffer.from(
    [0x10, 0x67, 0xE5, 0xF6, 0xB3, 0x48, 0xEA, 0xC2, 0x68, 0xB6,
        0x4F, 0xC9, 0xEB, 0x5A, 0x31, 0xA7, 0xD7, 0x9E, 0x33, 0xDF, 0xD6,
        0xFE, 0xF7, 0x6E, 0xAB, 0x9F, 0x49, 0x9B, 0x47, 0xEE, 0xD6, 0x9D]);

export const fundPartnerSerializedNameAndPubKey: Buffer = Buffer.from(
    [0x9, 0x46, 0x55, 0x4E, 0x44, 0x5F, 0x54, 0x45, 0x53, 0x54, 0x4,
        0x0, 0xBE, 0xEF, 0x98, 0xB4, 0xB2, 0x99, 0x4F, 0x68, 0x8F, 0xD9,
        0x8B, 0x56, 0x5E, 0x17, 0x1E, 0xC9, 0x25, 0x9C, 0x89, 0x6, 0x14,
        0xD2, 0xDB, 0xA6, 0x10, 0x52, 0x2, 0x1, 0x8E, 0x3A, 0x76, 0x4A, 0xA6,
        0x68, 0x3E, 0xA1, 0x16, 0xC9, 0xE0, 0xE3, 0xC8, 0x1, 0xCA, 0x5A, 0xB9,
        0x72, 0xA2, 0xF8, 0xF7, 0x9F, 0x90, 0x6E, 0x19, 0xF7, 0x3E, 0xDB, 0x91,
        0x45, 0x0, 0xEA, 0xD0, 0x2D, 0x70]);

export const DERSignatureOfFundPartnerNameAndPublicKey: Buffer = Buffer.from(
    [0x30, 0x44, 0x2, 0x20, 0x3C, 0x1C, 0xE9, 0xEA, 0xF2, 0x1A, 0x18, 0x80,
        0x3E, 0xA9, 0x87, 0x6F, 0xAB, 0x8F, 0x8A, 0x24, 0xB0, 0xD6, 0xE5, 0xF2,
        0x6E, 0xF7, 0x54, 0xF2, 0xD1, 0xA0, 0xAC, 0x34, 0x24, 0xFC, 0xB8, 0xE1,
        0x2, 0x20, 0x4F, 0x6C, 0x92, 0xCF, 0xEC, 0x8F, 0x23, 0x2C, 0x1B, 0x14,
        0x89, 0x88, 0x2F, 0x98, 0x7, 0xF, 0xE3, 0xE2, 0x0, 0x84, 0xD0, 0x23,
        0xD6, 0x53, 0xE3, 0xEE, 0xF6, 0x96, 0xBC, 0xA0, 0x27, 0x78]);

export const sellTestPrivateKey: Buffer = Buffer.from(
    [0x98, 0x1B, 0x16, 0xCB, 0xCB, 0x3C, 0xC5, 0xB0, 0xA, 0x5B,
        0xA5, 0x4A, 0x90, 0x43, 0x6B, 0xAB, 0xFE, 0x62, 0x12, 0x45, 0x3F,
        0x34, 0x93, 0x32, 0xE6, 0x7, 0x75, 0x2C, 0x12, 0xE1, 0x29, 0x63]);

export const sellPartnerSerializedNameAndPubKey: Buffer = Buffer.from(
    [0x9, 0x53, 0x45, 0x4C, 0x4C, 0x5F, 0x54, 0x45, 0x53, 0x54, 0x4,
        0xD3, 0x3F, 0x41, 0x8C, 0x8A, 0x4E, 0xCD, 0x54, 0xC2, 0x6D, 0xF0,
        0xEE, 0x77, 0x80, 0x75, 0x1E, 0x67, 0x9D, 0x95, 0x9C, 0xF9, 0x31,
        0xFE, 0xFD, 0xD7, 0x35, 0x36, 0x18, 0x4C, 0x51, 0x84, 0x1E, 0x26,
        0xB3, 0x48, 0x5, 0xFE, 0xE7, 0x34, 0x4E, 0xC1, 0x4F, 0x4D, 0xBD,
        0x67, 0x97, 0xF6, 0x18, 0x4C, 0x33, 0xAC, 0x64, 0x5A, 0x4C, 0xF1,
        0x2D, 0x56, 0xA2, 0x9A, 0x55, 0x11, 0x92, 0x37, 0xBA]);

export const DERSignatureOfSellPartnerNameAndPublicKey: Buffer = Buffer.from(
    [0x30, 0x44, 0x2, 0x20, 0x16, 0xAF, 0x68, 0x37, 0x45, 0xD4, 0x74, 0xC5,
        0xC6, 0x88, 0xF4, 0x25, 0x3A, 0x4D, 0xF6, 0x18, 0xA8, 0xA6, 0xD0, 0xB9,
        0x37, 0xDA, 0x32, 0x3B, 0xDF, 0xA6, 0x22, 0x6F, 0x0, 0x9A, 0x37, 0x64,
        0x2, 0x20, 0x59, 0x7B, 0x45, 0x86, 0xC, 0x2D, 0xEC, 0x2A, 0x20, 0xF1,
        0x6, 0xA3, 0x6E, 0xE2, 0xC7, 0xCD, 0x4A, 0x35, 0x8B, 0x20, 0x15, 0xB1,
        0x53, 0x49, 0x15, 0x2C, 0x7E, 0xE8, 0xE1, 0xAE, 0x11, 0x4D]);


// 0x3 BTC 0x7 Bitcoin 0x0
export const BTCConfig = Buffer.from([0x3, 0x42, 0x54, 0x43, 0x7, 0x42, 0x69, 0x74, 0x63, 0x6F, 0x69, 0x6E, 0x0]);
export const BTCConfigSignature = Buffer.from([0x30, 0x45, 0x2, 0x21, 0x0, 0xCB, 0x17, 0x43, 0x82, 0x30, 0x22, 0x19, 0xDC, 0xA3, 0x59, 0xC0, 0xA4, 0xD4, 0x57, 0xB2, 0x56, 0x9E, 0x31, 0xA0, 0x6B, 0x2C, 0x25, 0xC0, 0x8, 0x8A, 0x2B, 0xD3, 0xFD, 0x6C, 0x4, 0x38, 0x6A, 0x2, 0x20, 0x2C, 0x6D, 0xA, 0x5B, 0x92, 0x4A, 0x41, 0x46, 0x21, 0x6, 0x7E, 0x31, 0x6F, 0x2, 0x1A, 0xA1, 0x3A, 0xA5, 0xB2, 0xEE, 0xE2, 0xBF, 0x36, 0xEA, 0x3C, 0xFD, 0xDE, 0xBC, 0x5, 0x3B, 0x20, 0x1B]);

// 0x3 LTC 0x8 Litecoin 0x0
export const LTCConfig = Buffer.from([0x3, 0x4C, 0x54, 0x43, 0x8, 0x4C, 0x69, 0x74, 0x65, 0x63, 0x6F, 0x69, 0x6E, 0x0]);
export const LTCConfigSignature = Buffer.from([0x30, 0x45, 0x2, 0x21, 0x0, 0x98, 0xF7, 0xA, 0xD7, 0xD7, 0x57, 0xE3, 0x45, 0x2E, 0xE2, 0x97, 0x21, 0x5B, 0xE6, 0xC, 0xE0, 0x18, 0x87, 0xCF, 0xAB, 0x29, 0xF9, 0x98, 0x11, 0x34, 0x32, 0x82, 0x3F, 0x94, 0xD3, 0x5B, 0x88, 0x2, 0x20, 0x31, 0xE1, 0x41, 0x9C, 0xF1, 0xCE, 0x94, 0x34, 0x1, 0xE5, 0x70, 0x32, 0x52, 0x8E, 0x3A, 0x99, 0xEC, 0x7D, 0x33, 0x86, 0x65, 0x26, 0x5D, 0xED, 0xF2, 0x5B, 0xEC, 0xA4, 0x5F, 0x49, 0x52, 0xFB]);

// 0x3 XRP 0x3 XRP 0x0
export const XRPConfig = Buffer.from([0x3, 0x58, 0x52, 0x50, 0x3, 0x58, 0x52, 0x50, 0x0]);
export const XRPConfigSignature = Buffer.from([0x30, 0x45, 0x2, 0x21, 0x0, 0x90, 0xEA, 0x97, 0x51, 0xD8, 0xA8, 0x28, 0x75, 0x4B, 0xA2, 0x32, 0xBD, 0xC1, 0xC2, 0xEF, 0x9F, 0x8C, 0x5, 0x47, 0x60, 0x8F, 0x3A, 0xE5, 0x21, 0x32, 0xA2, 0xD9, 0xEB, 0x83, 0x3, 0x7, 0xE3, 0x2, 0x20, 0x79, 0xBE, 0x69, 0x9A, 0x56, 0xDB, 0x93, 0xD, 0xA3, 0x4, 0xC8, 0x3D, 0xAB, 0xF8, 0x6, 0x93, 0x8C, 0x86, 0xD6, 0xC7, 0xE2, 0x43, 0xF0, 0x27, 0xAF, 0xF3, 0x8B, 0x1C, 0xBC, 0xE, 0xDF, 0xFE]);

// 0x3 XLM 0x7 Stellar 0x0
export const XLMConfig = Buffer.from([0x3, 0x58, 0x4C, 0x4D, 0x7, 0x53, 0x74, 0x65, 0x6C, 0x6C, 0x61, 0x72, 0x0]);
export const XLMConfigSignature = Buffer.from([0x30, 0x44, 0x2, 0x20, 0x1F, 0xEA, 0x2C, 0x99, 0x9B, 0x73, 0x5A, 0x49, 0xB1, 0x97, 0x0, 0x5, 0xB0, 0x1, 0xC8, 0x88, 0x50, 0x80, 0x81, 0xD2, 0x8C, 0x9C, 0xB4, 0x2D, 0x28, 0x9F, 0xD1, 0xC6, 0x5C, 0xD8, 0x91, 0xF9, 0x2, 0x20, 0x23, 0xD3, 0xEF, 0xD7, 0xE5, 0x85, 0x88, 0x6C, 0x12, 0x9E, 0x96, 0xFE, 0x61, 0x88, 0x38, 0xE8, 0x65, 0xF1, 0xAB, 0x27, 0x9D, 0x15, 0xE5, 0xB6, 0x76, 0xA1, 0x55, 0xA2, 0x11, 0xCA, 0x74, 0xC9]);

// 0x3 XTZ 12 "Tezos Wallet" 0x0
export const XTZConfig = Buffer.from([0x3, 0x58, 0x54, 0x5A, 0xC, 0x54, 0x65, 0x7A, 0x6F, 0x73, 0x20, 0x57, 0x61, 0x6C, 0x6C, 0x65, 0x74, 0x0]);
export const XTZConfigSignature = Buffer.from([0x30, 0x44, 0x2, 0x20, 0x68, 0xF3, 0xE3, 0xCC, 0xBF, 0x30, 0xF5, 0x53, 0xC0, 0x5E, 0xC8, 0xF4, 0x73, 0x65, 0x96, 0x66, 0x23, 0xA9, 0x17, 0x33, 0xD2, 0xD0, 0xCE, 0xC6, 0x5C, 0xBC, 0xBE, 0x1F, 0x87, 0x9, 0x63, 0x32, 0x2, 0x20, 0x64, 0x11, 0xD6, 0xED, 0xA5, 0x9F, 0xD1, 0x5, 0xB2, 0x4E, 0x2E, 0x5D, 0x82, 0x9C, 0x81, 0x9C, 0xA2, 0x95, 0x9, 0xF6, 0xD8, 0x67, 0xA2, 0x52, 0x4E, 0x73, 0xB3, 0xF4, 0xE1, 0x99, 0xFA, 0x4F]);

// 0x3 ETH 0x8 Ethereum 0x5 0x3 ETH 0x12 (18)
export const ETHConfig = Buffer.from([0x3, 0x45, 0x54, 0x48, 0x8, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6D, 0x5, 0x3, 0x45, 0x54, 0x48, 0x12]);
export const ETHConfigSignature = Buffer.from([0x30, 0x44, 0x2, 0x20, 0x65, 0xD7, 0x93, 0x1A, 0xB3, 0x14, 0x43, 0x62, 0xD5, 0x7E, 0x3F, 0xDC, 0xC5, 0xDE, 0x92, 0x1F, 0xB6, 0x50, 0x24, 0x73, 0x7D, 0x91, 0x7F, 0xA, 0xB1, 0xF8, 0xB1, 0x73, 0xD1, 0xED, 0x3C, 0x2E, 0x2, 0x20, 0x27, 0x49, 0x35, 0x68, 0xD1, 0x12, 0xDC, 0x53, 0xC7, 0x17, 0x7F, 0x8E, 0x5F, 0xC9, 0x15, 0xD9, 0x1A, 0x90, 0x37, 0x80, 0xA0, 0x67, 0xBA, 0xDF, 0x10, 0x90, 0x85, 0xA7, 0x3D, 0x36, 0x3, 0x23]);

// 0x2 AE 0x8 Ethereum 0x4 0x2 AE 0x12 (18)
export const AEConfig = Buffer.from([0x2, 0x41, 0x45, 0x8, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6D, 0x4, 0x2, 0x41, 0x45, 0x12]);
export const AEConfigSignature = Buffer.from([0x30, 0x45, 0x2, 0x21, 0x0, 0x81, 0xC3, 0x9F, 0x9D, 0x43, 0x6B, 0xFC, 0xA, 0x2E, 0x39, 0xB3, 0x3F, 0x83, 0x70, 0x91, 0x30, 0x2, 0x74, 0xE3, 0xC6, 0xC3, 0x14, 0x8F, 0x90, 0xC1, 0xDA, 0x73, 0xB6, 0x35, 0x76, 0x31, 0x31, 0x2, 0x20, 0x15, 0x97, 0xDC, 0xC9, 0x4C, 0x2E, 0x29, 0x4D, 0x3A, 0xB5, 0x17, 0xDF, 0x2F, 0xCF, 0xDF, 0x45, 0x6E, 0xCD, 0x35, 0x3A, 0x51, 0xF9, 0xF4, 0x64, 0x83, 0x62, 0x1, 0x10, 0x6C, 0x6D, 0x30, 0x70]);

// 0x4 SHIB 0x8 Ethereum 0x6 0x4 SHIB 0x14 (22)
export const SHIBConfig = Buffer.from([0x4, 0x53, 0x48, 0x49, 0x42, 0x8, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6D, 0x6, 0x4, 0x53, 0x48, 0x49, 0x42, 0x14]);
export const SHIBConfigSignature = Buffer.from([0x30, 0x44, 0x2, 0x20, 0x3D, 0x0, 0x30, 0x1, 0x29, 0xAB, 0x73, 0xC7, 0x72, 0x21, 0x1A, 0xBA, 0x55, 0xBC, 0x65, 0x97, 0xC6, 0x61, 0xF3, 0x84, 0x5E, 0xD9, 0xD5, 0x2A, 0x5D, 0xB9, 0x2A, 0xBA, 0x5B, 0x7E, 0xAC, 0x3C, 0x2, 0x20, 0x40, 0x1C, 0xB9, 0x2D, 0x40, 0x69, 0x6A, 0x9F, 0xCF, 0x2C, 0x2A, 0x24, 0x98, 0x26, 0xF4, 0xDA, 0xD, 0xC8, 0x26, 0x5D, 0x92, 0x3, 0x98, 0x95, 0x5E, 0x72, 0x78, 0xB3, 0xA3, 0xB8, 0xA2, 0xCE]);

// 0x4 USTD 0x8 Ethereum 0x6 0x4 USTD 0x6
export const USDTConfig = Buffer.from([0x4, 0x55, 0x53, 0x44, 0x54, 0x8, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6D, 0x6, 0x4, 0x55, 0x53, 0x44, 0x54, 0x6]);
export const USDTConfigSignature = Buffer.from([0x30, 0x44, 0x2, 0x20, 0xB, 0x3A, 0x84, 0x45, 0x43, 0x66, 0x6B, 0xBD, 0xC9, 0x16, 0x42, 0xE1, 0xD0, 0x70, 0xAF, 0xA6, 0x8, 0x45, 0x10, 0x6D, 0x77, 0xBF, 0xE2, 0xBD, 0x9B, 0x5B, 0x9D, 0x16, 0x5D, 0xED, 0x6A, 0xB5, 0x2, 0x20, 0xF, 0xEA, 0xB0, 0x18, 0x27, 0x83, 0x66, 0xA8, 0x25, 0xE6, 0x2F, 0x42, 0x4A, 0x68, 0xAE, 0xCE, 0xDD, 0x41, 0x88, 0xA9, 0xD2, 0x49, 0x3E, 0x21, 0x70, 0xE6, 0xDF, 0xD6, 0xE7, 0x11, 0x3D, 0xB4]);

// 0x3 REP 0x8 Ethereum 0x5 0x3 REP 0x12 (18)
export const REPConfig = Buffer.from([0x3, 0x52, 0x45, 0x50, 0x8, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6D, 0x5, 0x3, 0x52, 0x45, 0x50, 0x12]);
export const REPConfigSignature = Buffer.from([0x30, 0x45, 0x2, 0x21, 0x0, 0xB9, 0x73, 0x3B, 0xE7, 0x1E, 0xDE, 0x42, 0x8A, 0x1F, 0x44, 0x6, 0x6D, 0x36, 0x92, 0x61, 0x4D, 0xDC, 0xFE, 0x45, 0x3B, 0xF8, 0xB5, 0xBA, 0xF, 0x7D, 0x8B, 0x4E, 0x5D, 0x5B, 0x2, 0xD1, 0x63, 0x2, 0x20, 0x50, 0x8C, 0xC7, 0xB8, 0xFA, 0x8A, 0xE9, 0x70, 0xFE, 0xCC, 0x96, 0x8D, 0xB2, 0xA3, 0xF, 0x65, 0xB9, 0xE3, 0x50, 0xD, 0x74, 0x52, 0x27, 0x7D, 0xC6, 0x53, 0x45, 0xA6, 0xA2, 0xD5, 0xE4, 0x75]);

// ############################
// # END OF GENERATED CONTENT #
// ############################



export function numberToBigEndianBuffer(x: number): Uint8Array {
    var hex = x.toString(16);
    return Uint8Array.from(Buffer.from(hex.padStart(hex.length + hex.length % 2, '0'), 'hex'));
}


// only for BTC, where we support multiple address format
export function getSerializedAddressParametersBTC(
    path: string, format?: AddressFormat
): { addressParameters: Buffer } {
    type AddressFormat = "legacy" | "p2sh" | "bech32" | "bech32m";
    const addressFormatMap = {
        legacy: 0,
        p2sh: 1,
        bech32: 2,
        // 3 is skipped as it was used for "cashaddr" format
        bech32m: 4
    };
    format = format || "legacy";
    if (!(format in addressFormatMap)) {
        throw new Error("btc.getWalletPublicKey invalid format=" + format);
    }
    const buffer = bip32asBuffer(path);
    const addressParameters = Buffer.concat([Buffer.from([addressFormatMap[format]]), buffer]);
    return { addressParameters };
}

// For every other coins
export function getSerializedAddressParameters(
    path: string
): { addressParameters: Buffer } {
    const addressParameters = bip32asBuffer(path);
    return { addressParameters };
}


// Info necessary to use a coin as FROM or TO in a swap
export class CurrencyInfo {
    constructor(name: string, displayName: string,
                sendingAddress: string, sendingExtraId: string,
                receivingAddress: string, receivingExtraId: string,
                invalidAddress: string,
                config: Buffer, configSignature: Buffer,
                serializedAddressParameters: Buffer) {
        this.name = name;
        this.displayName = displayName;
        this.sendingAddress = sendingAddress;
        this.sendingExtraId = sendingExtraId;
        this.receivingAddress = receivingAddress;
        this.receivingExtraId = receivingExtraId;
        this.invalidAddress = invalidAddress;
        this.config = config;
        this.configSignature = configSignature;
        this.serializedAddressParameters = serializedAddressParameters;
    }
}


// Const data for the tested currencies
export const ETH_INFO = new CurrencyInfo("ETH", "eth",
                                  "0xd692Cb1346262F584D17B4B470954501f6715a82", "",
                                  "0xDad77910DbDFdE764fC21FCD4E74D71bBACA6D8D", "",
                                  "",
                                  ETHConfig, ETHConfigSignature,
                                  getSerializedAddressParameters("44'/60'/0'/0/0"));

export const XRP_INFO = new CurrencyInfo("XRP", "xrp",
                                  "rhBuYom8agWA4s7DFoM7AvsDA9XGkVCJz4", "98765432",
                                  "rhBuYom8agWA4s7DFoM7AvsDA9XGkVCJz4", "",
                                  "",
                                  XRPConfig, XRPConfigSignature,
                                  getSerializedAddressParameters("44'/144'/0'/1/0"));

export const AE_INFO = new CurrencyInfo("AE", "erc20_AE",
                                  "0xd692Cb1346262F584D17B4B470954501f6715a82", "",
                                  "0xDad77910DbDFdE764fC21FCD4E74D71bBACA6D8D", "",
                                  "",
                                   AEConfig, AEConfigSignature,
                                   getSerializedAddressParameters("44'/60'/0'/0/0"));

export const SHIB_INFO = new CurrencyInfo(
    "SHIB",
    "erc20_SHIB",
    "0xd692Cb1346262F584D17B4B470954501f6715a82",
    "JDAGMEFPAX",
    "0xDad77910DbDFdE764fC21FCD4E74D71bBACA6D8D",
    "JDAGMEFPAX",
    "",
    SHIBConfig,
    SHIBConfigSignature,
    getSerializedAddressParameters("44'/60'/0'/0/0")
);


export const XLM_INFO = new CurrencyInfo("XLM", "xlm",
                                  "GC3JHKMIG7SWJEBAHFX35ILEFQJFSOKRSWFGTVXTPGCGDWG54FPXJ2Z6", "123456789123456",
                                  "GCNCEJIAZ5D3APIF5XWAJ3JSSTHM4HPHE7GK3NAB6R6WWSZDB2A2BQ5B", "",
                                  "",
                                  XLMConfig, XLMConfigSignature,
                                  getSerializedAddressParameters("44'/148'/0'"));

export const XTZ_INFO = new CurrencyInfo("XTZ", "xtz",
                                  "tz1RjJLvt7iguJQnVVWYca2AHDpHYmPJYz4d", "",
                                  "tz1RVYaHiobUKXMfJ47F7Rjxx5tu3LC35WSA", "",
                                  "",
                                  XTZConfig, XTZConfigSignature,
                                  getSerializedAddressParameters("44'/1729'/0'/0'"));

export const BTC_INFO = new CurrencyInfo("BTC", "btc",
                                  "34dZAvAf1ywuKj1iAydSpPtavigteo1T5G", "",
                                  "bc1qwpgezdcy7g6khsald7cww42lva5g5dmasn6y2z", "",
                                  "",
                                  BTCConfig, BTCConfigSignature,
                                  getSerializedAddressParametersBTC("84'/0'/0'/1/0", "bech32"));

export const BTC_LEGACY_INFO = new CurrencyInfo("BTC", "btc_legacy",
                                  "36skqF7TKdwvLYhdRRdq4kA954qZgZicYB", "",
                                  "31mceY4tx8cr75vQLLFcK1Gp2VkGdyZfZy", "",
                                  "",
                                  BTCConfig, BTCConfigSignature,
                                  getSerializedAddressParametersBTC("49'/0'/0'/0/0", "p2sh"));

export const BTC_NEWPROTOCOL_SEGWIT_INFO = new CurrencyInfo("BTC", "btc_newprotocol_segwit",
                                  "bc1qqtl9jlrwcr3fsfcjj2du7pu6fcgaxl5dsw2vyg", "",
                                  "bc1qmwu9n0kx73cte4wt7mgxhkereqgqerumh2q86x", "",
                                  "",
                                  BTCConfig, BTCConfigSignature,
                                  getSerializedAddressParametersBTC("84'/0'/0'/0/10", "bech32"));

export const BTC_NEWPROTOCOL_TAPROOT_INFO = new CurrencyInfo("BTC", "btc_newprotocol_taproot",
                                  "bc1qnjg0jd8228aq7egyzacy8cys3knf9xvrerkf9g", "",
                                  "bc1p3a2hvrnu9pddga5umef49keepgcw7yvz5a7m2uxx6vsrmth4p40qzrgjwr", "",
                                  "",
                                  BTCConfig, BTCConfigSignature,
                                  getSerializedAddressParametersBTC("86'/0'/0'/0/6", "bech32m"));

export const LTC_INFO = new CurrencyInfo("LTC", "ltc",
                                  "MTmgECMPDEUHhtdjKTfd6GddwueYHyQYJw", "",
                                  "MJovkMvQ2rXXUj7TGVvnQyVMWghSdqZsmu", "",
                                  "",
                                  LTCConfig, LTCConfigSignature,
                                  getSerializedAddressParametersBTC("49'/2'/0'/0/0", "p2sh"));

export const LTC_LEGACY_INFO = new CurrencyInfo("LTC", "ltc_legacy",
                                  "", "",
                                  "LKtSt6xfsmJMkPT8YyViAsDeRh7k8UfNjD", "",
                                  "",
                                  LTCConfig, LTCConfigSignature,
                                  getSerializedAddressParametersBTC("49'/0'/0'/0/0"));
