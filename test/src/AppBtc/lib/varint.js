"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sanitizeVarintToNumber = exports.createVarint = exports.parseVarint = void 0;
function bigintToSmallEndian(value, length, buffer, offset) {
    for (let i = 0; i < length; i++) {
        if (buffer[i + offset] == undefined) {
            throw Error('Buffer too small');
        }
        buffer[i + offset] = Number(value % BigInt(256));
        value = value >> BigInt(8);
    }
}
function smallEndianToBigint(buffer, offset, length) {
    let result = BigInt(0);
    for (let i = 0; i < length; i++) {
        if (buffer[i + offset] == undefined) {
            throw Error('Buffer too small');
        }
        result += BigInt(buffer[i + offset]) << BigInt(i * 8);
    }
    return result;
}
function getVarintSize(value) {
    if (typeof value == 'number') {
        if (value > Number.MAX_SAFE_INTEGER) {
            throw new Error("createVarint with a 'number' input only support inputs not bigger than MAX_SAFE_INTEGER");
        }
        value = BigInt(value);
    }
    if (value < BigInt(0)) {
        throw new Error('Negative numbers are not supported');
    }
    if (value >= BigInt(1) << BigInt(64)) {
        throw new Error('Too large for a Bitcoin-style varint');
    }
    if (value < BigInt(0xfd))
        return 1;
    else if (value <= BigInt(0xffff))
        return 3;
    else if (value <= BigInt(0xffffffff))
        return 5;
    else
        return 9;
}
function parseVarint(data, offset) {
    if (data[offset] == undefined) {
        throw Error('Buffer too small');
    }
    if (data[offset] < 0xfd) {
        return [BigInt(data[offset]), 1];
    }
    else {
        let size;
        if (data[offset] === 0xfd)
            size = 2;
        else if (data[offset] === 0xfe)
            size = 4;
        else
            size = 8;
        return [smallEndianToBigint(data, offset + 1, size), size + 1];
    }
}
exports.parseVarint = parseVarint;
function createVarint(value) {
    const size = getVarintSize(value);
    value = BigInt(value);
    const buffer = Buffer.alloc(size);
    if (size == 1) {
        buffer[0] = Number(value);
    }
    else {
        if (size == 3)
            buffer[0] = 0xfd;
        else if (size === 5)
            buffer[0] = 0xfe;
        else
            buffer[0] = 0xff;
        bigintToSmallEndian(value, size - 1, buffer, 1);
    }
    return buffer;
}
exports.createVarint = createVarint;
function sanitizeVarintToNumber(n) {
    if (n < 0)
        throw Error('Negative bigint is not a valid varint');
    if (n > Number.MAX_SAFE_INTEGER)
        throw Error('Too large for a Number');
    return Number(n);
}
exports.sanitizeVarintToNumber = sanitizeVarintToNumber;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFyaW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi92YXJpbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsU0FBUyxtQkFBbUIsQ0FDMUIsS0FBYSxFQUNiLE1BQWMsRUFDZCxNQUFjLEVBQ2QsTUFBYztJQUVkLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDL0IsSUFBSSxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLFNBQVMsRUFBRTtZQUNuQyxNQUFNLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1NBQ2pDO1FBQ0QsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2pELEtBQUssR0FBRyxLQUFLLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzVCO0FBQ0gsQ0FBQztBQUVELFNBQVMsbUJBQW1CLENBQzFCLE1BQWMsRUFDZCxNQUFjLEVBQ2QsTUFBYztJQUVkLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQy9CLElBQUksTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxTQUFTLEVBQUU7WUFDbkMsTUFBTSxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztTQUNqQztRQUNELE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDdkQ7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFD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